<!DOCTYPE html>
<html>
  <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no">
        <script src="https://cesium.com/downloads/cesiumjs/releases/1.76/Build/Cesium/Cesium.js"></script>
        <script src="https://npmcdn.com/csv2geojson@latest/csv2geojson.js"></script>
        <link href="https://cesium.com/downloads/cesiumjs/releases/1.76/Build/Cesium/Widgets/widgets.css" rel="stylesheet">
        <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
  </head>
    <body>
      <div id="cesiumContainer" style="width: 100%; height:100%"></div>
      <script>

         var viewer = new Cesium.Viewer('cesiumContainer');

        //都市モデルのロード
        var tileset = viewer.scene.primitives.add(new Cesium.Cesium3DTileset({
            url: "https://s3-ap-northeast-1.amazonaws.com/3dimension.jp/3dtiles/tokyo_bldg_20201222/13113_shibuya-ku/tileset.json",
        }))
        // tileset.style = new Cesium.Cesium3DTileStyle({  
        //   color : {
        //       conditions : [
        //           ['${1_1_高さ} >= 100', 'color("purple", 0.5)'],
        //           ['${1_1_高さ} >= 50', 'color("red")'],
        //           ['true', 'color("blue")']
        //       ]
        //   },
        //   show : '${1_1_高さ} > 0',
        //   meta : {
        //       description : '"Building id ${id} has height ${1_1_高さ}."'
        //   }
        // });
        Cesium.when(tileset.readyPromise).then(function (tileset,busPin) {viewer.flyTo(tileset)})

        var getBus = function() {
          viewer.dataSources.removeAll();
          $.ajax({
            type: "GET",
            url: 'https://oec-bus-location.glitch.me/getGTFSRT_ToeiBus'
            }).done((data, textStatus, jqXHR) => {
              csv2geojson.csv2geojson(data, {
                  latfield: 'lat',
                  lonfield: 'lon',
                  delimiter: ','
              }, function(err, data) {
                //geojson
                var dataSource = Cesium.GeoJsonDataSource.load(data);
                viewer.dataSources.add(dataSource);
              });
            }).fail((jqXHR, textStatus, errorThrown) => {
                alert("error");
            });

          };
        getBus();
        setInterval(getBus, 30000);
      </script>
    </body>
</html>

